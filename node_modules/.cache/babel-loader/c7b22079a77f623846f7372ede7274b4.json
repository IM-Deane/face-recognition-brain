{"ast":null,"code":"var _jsxFileName = \"/Users/tristandeane/Documents/GitHub/face-recognition-brain/src/App.js\";\nimport React, { Component } from \"react\";\nimport Particles from \"react-particles-js\";\nimport Clarifai from \"clarifai\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Signin from \"./components/Signin/Signin\";\nimport Register from \"./components/Register/Register\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport \"./App.css\"; //You must add your own API key here from Clarifai.\n\nconst app = new Clarifai.App({\n  apiKey: \"03dac9e7ed71464ebabf70f845152348\"\n});\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById(\"inputimage\");\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict( // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n      // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n      // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n      // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n      // is to use a different version of their model that works like: `c0c0ac362b03416da06ab3fa36fb58e3`\n      // so you would change from:\n      // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      // to:\n      // .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\n      Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => {\n        console.log(\"hi\", response);\n\n        if (response) {\n          fetch(\"http://localhost:3000/image\", {\n            method: \"put\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          });\n        }\n\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n\n    this.onRouteChange = route => {\n      if (route === \"signout\") {\n        this.setState({\n          isSignedIn: false\n        });\n      } else if (route === \"home\") {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {},\n      route: \"signin\",\n      isSignedIn: false,\n      user: {\n        id: \"\",\n        name: \"\",\n        email: \"\",\n        entries: 0,\n        joined: \"\"\n      }\n    };\n  }\n\n  render() {\n    const {\n      isSignedIn,\n      imageUrl,\n      route,\n      box\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\"\n    }, /*#__PURE__*/React.createElement(Particles, {\n      className: \"particles\",\n      params: particlesOptions\n    }), /*#__PURE__*/React.createElement(Navigation, {\n      isSignedIn: isSignedIn,\n      onRouteChange: this.onRouteChange\n    }), route === \"home\" ? /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Logo, null), /*#__PURE__*/React.createElement(Rank, {\n      name: this.state.user.name,\n      entries: this.state.user.entries\n    }), /*#__PURE__*/React.createElement(ImageLinkForm, {\n      onInputChange: this.onInputChange,\n      onButtonSubmit: this.onButtonSubmit\n    }), /*#__PURE__*/React.createElement(FaceRecognition, {\n      box: box,\n      imageUrl: imageUrl\n    })) : route === \"signin\" ? /*#__PURE__*/React.createElement(Signin, {\n      loadUser: this.loadUser,\n      onRouteChange: this.onRouteChange\n    }) : /*#__PURE__*/React.createElement(Register, {\n      loadUser: this.loadUser,\n      onRouteChange: this.onRouteChange\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tristandeane/Documents/GitHub/face-recognition-brain/src/App.js"],"names":["React","Component","Particles","Clarifai","FaceRecognition","Navigation","Signin","Register","Logo","ImageLinkForm","Rank","app","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","constructor","loadUser","data","setState","user","id","name","email","entries","joined","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","onInputChange","event","input","target","onButtonSubmit","imageUrl","state","models","predict","FACE_DETECT_MODEL","then","response","console","log","fetch","method","headers","body","JSON","stringify","json","count","Object","assign","catch","err","onRouteChange","route","isSignedIn","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Particles from \"react-particles-js\";\nimport Clarifai from \"clarifai\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Signin from \"./components/Signin/Signin\";\nimport Register from \"./components/Register/Register\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport \"./App.css\";\n\n//You must add your own API key here from Clarifai.\nconst app = new Clarifai.App({\n\tapiKey: \"03dac9e7ed71464ebabf70f845152348\",\n});\n\nconst particlesOptions = {\n\tparticles: {\n\t\tnumber: {\n\t\t\tvalue: 30,\n\t\t\tdensity: {\n\t\t\t\tenable: true,\n\t\t\t\tvalue_area: 800,\n\t\t\t},\n\t\t},\n\t},\n};\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinput: \"\",\n\t\t\timageUrl: \"\",\n\t\t\tbox: {},\n\t\t\troute: \"signin\",\n\t\t\tisSignedIn: false,\n\t\t\tuser: {\n\t\t\t\tid: \"\",\n\t\t\t\tname: \"\",\n\t\t\t\temail: \"\",\n\t\t\t\tentries: 0,\n\t\t\t\tjoined: \"\",\n\t\t\t},\n\t\t};\n\t}\n\n\tloadUser = (data) => {\n\t\tthis.setState({\n\t\t\tuser: {\n\t\t\t\tid: data.id,\n\t\t\t\tname: data.name,\n\t\t\t\temail: data.email,\n\t\t\t\tentries: data.entries,\n\t\t\t\tjoined: data.joined,\n\t\t\t},\n\t\t});\n\t};\n\n\tcalculateFaceLocation = (data) => {\n\t\tconst clarifaiFace =\n\t\t\tdata.outputs[0].data.regions[0].region_info.bounding_box;\n\t\tconst image = document.getElementById(\"inputimage\");\n\t\tconst width = Number(image.width);\n\t\tconst height = Number(image.height);\n\t\treturn {\n\t\t\tleftCol: clarifaiFace.left_col * width,\n\t\t\ttopRow: clarifaiFace.top_row * height,\n\t\t\trightCol: width - clarifaiFace.right_col * width,\n\t\t\tbottomRow: height - clarifaiFace.bottom_row * height,\n\t\t};\n\t};\n\n\tdisplayFaceBox = (box) => {\n\t\tthis.setState({ box: box });\n\t};\n\n\tonInputChange = (event) => {\n\t\tthis.setState({ input: event.target.value });\n\t};\n\n\tonButtonSubmit = () => {\n\t\tthis.setState({ imageUrl: this.state.input });\n\t\tapp.models\n\t\t\t.predict(\n\t\t\t\t// HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n\t\t\t\t// A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n\t\t\t\t// for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n\t\t\t\t// If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n\t\t\t\t// is to use a different version of their model that works like: `c0c0ac362b03416da06ab3fa36fb58e3`\n\t\t\t\t// so you would change from:\n\t\t\t\t// .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n\t\t\t\t// to:\n\t\t\t\t// .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\n\t\t\t\tClarifai.FACE_DETECT_MODEL,\n\t\t\t\tthis.state.input\n\t\t\t)\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(\"hi\", response);\n\t\t\t\tif (response) {\n\t\t\t\t\tfetch(\"http://localhost:3000/image\", {\n\t\t\t\t\t\tmethod: \"put\",\n\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tid: this.state.user.id,\n\t\t\t\t\t\t}),\n\t\t\t\t\t})\n\t\t\t\t\t\t.then((response) => response.json())\n\t\t\t\t\t\t.then((count) => {\n\t\t\t\t\t\t\tthis.setState(Object.assign(this.state.user, { entries: count }));\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.displayFaceBox(this.calculateFaceLocation(response));\n\t\t\t})\n\t\t\t.catch((err) => console.log(err));\n\t};\n\n\tonRouteChange = (route) => {\n\t\tif (route === \"signout\") {\n\t\t\tthis.setState({ isSignedIn: false });\n\t\t} else if (route === \"home\") {\n\t\t\tthis.setState({ isSignedIn: true });\n\t\t}\n\t\tthis.setState({ route: route });\n\t};\n\n\trender() {\n\t\tconst { isSignedIn, imageUrl, route, box } = this.state;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Particles className=\"particles\" params={particlesOptions} />\n\t\t\t\t<Navigation\n\t\t\t\t\tisSignedIn={isSignedIn}\n\t\t\t\t\tonRouteChange={this.onRouteChange}\n\t\t\t\t/>\n\t\t\t\t{route === \"home\" ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Logo />\n\t\t\t\t\t\t<Rank\n\t\t\t\t\t\t\tname={this.state.user.name}\n\t\t\t\t\t\t\tentries={this.state.user.entries}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ImageLinkForm\n\t\t\t\t\t\t\tonInputChange={this.onInputChange}\n\t\t\t\t\t\t\tonButtonSubmit={this.onButtonSubmit}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FaceRecognition box={box} imageUrl={imageUrl} />\n\t\t\t\t\t</div>\n\t\t\t\t) : route === \"signin\" ? (\n\t\t\t\t\t<Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n\t\t\t\t) : (\n\t\t\t\t\t<Register\n\t\t\t\t\t\tloadUser={this.loadUser}\n\t\t\t\t\t\tonRouteChange={this.onRouteChange}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}